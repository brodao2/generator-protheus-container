#!/bin/bash

# =======================================================
# Generated by "Protheus Generator <%- appVersion %>" on <%- new Date().toLocaleString() %>
# CAUTION: Manual editions can be overwritten
# =======================================================

# Este script é usado para gerenciar serviços do Protheus, permitindo
# iniciar, parar, reiniciar, matar, verificar o status, exibir informações detalhadas,
# exportar logs e configurações, e monitorar logs em tempo real.
# Use as opções start, stop, kill, restart, status, describe, export, ou log para realizar
# operações comuns de serviço de maneira fácil e eficiente.

#########################################
#   CONFIGURAÇÃO DO SERVIÇO
#########################################
#Inserir o nome do executável
prog="appsrvlinux"

#Inserir o caminho do diretório do executável
pathbin="/totvs/bin/protheus/appserver<%- appSequence %>"

alias=$(basename "${pathbin}")

progbin="${pathbin}/${prog}"
pidfile="/var/run/${alias}.pid"
lockfile="/var/lock/subsys/${alias}"

config_filename=appserver.ini
log_filename=console.log

#################################################################
# Configurações de limites
#################################################################
#open files - (-n)
openFiles=65536
#stack size - (kbytes, -s)
stackSize=1024
#core file size - (blocks, -c)
coreFileSize=unlimited
#file size - (blocks, -f)
fileSize=unlimited
#cpu time - (seconds, -t)
cpuTime=unlimited
#virtual memory - (-v)
virtualMemory=unlimited

#Variaveis de Output
red="\033[31m"
green='\033[32m'
reset='\033[m'

#################################################################

RETVAL=0

#################################################################
## Verifica permissões
#################################################################
test -x $progbin || {
  echo "$progbin not installed"
  if [ "$1" = "stop" ]; then
    exit 0
  else exit 5; fi
}

#################################################################
## Aplica configurações do serviço
#################################################################

#Prepara as ulimit para o servico do DBAccess
ulimit -n ${openFiles}
ulimit -s ${stackSize}
ulimit -c ${coreFileSize}
ulimit -f ${fileSize}
ulimit -t ${cpuTime}
ulimit -v ${virtualMemory}

#################################################################
## Acessa o diretorio configurado e define caminho de busca de libs
#################################################################
cd $pathbin
export LD_LIBRARY_PATH=${pathbin}

#################################################################
## Start_service: inicia o serviço
#################################################################
start_service() {

  if [ -z $(pidof -x $progbin) ]; then
    echo "Starting ${progbin} -d ... "
    ${progbin} -d  &
    RETVAL=$?
    if [ ${RETVAL} -eq 0 ]; then
      touch ${lockfile}
      touch ${pidfile}
      pidof -x ${progbin} >${pidfile}
      sleep 1
      echo "PID : " $(cat ${pidfile})
      echo -e "${prog} running :   ${green}[ OK ]${reset}"
    else
      echo -e "Failed to start ${prog} :         ${red}[ Failure ]${reset}"
    fi
    echo
  else
    echo -e "$prog is ${green}Started${reset} pid $(pidof -x $progbin)"
  fi
}

#################################################################
## Stop_service: encerra o serviço
#################################################################
stop_service() {
  if [ ! -z $(pidof -x ${progbin}) ]; then

    kill -s SIGTERM $(pidof -x ${progbin})

    echo
    rm -f $lockfile
    rm -f $pidfile
    echo -n "Stopping ${prog}."
    while [ ! -z $(pidof -x ${progbin}) ]; do
      echo -n "."
      sleep 1
    done
    echo
    echo -e "${prog} is Stopped     ${red}[ Stopped ]${reset}"
  else
    echo -e "${prog} is not running ${red}[ Stopped ]${reset}"
  fi
}

#################################################################
## Kill_service: interrompe o serviço
#################################################################
kill_service() {
  if [ ! -z $(pidof -x ${progbin}) ]; then

    kill -s SIGKILL $(pidof -x ${progbin})

    echo
    rm -f $lockfile
    rm -f $pidfile
    echo -n "Stopping ${prog}."
    while [ ! -z $(pidof -x ${progbin}) ]; do
      echo -n "."
      sleep 1
    done
    echo
    echo -e "${prog} is Killed     ${red}[ Killed ]${reset}"
  else
    echo -e "${prog} is not running ${red}[ Stopped ]${reset}"
  fi
}

#################################################################
## get_stats: coleta os dados do serviço e exporta no contexto atual.
#################################################################
get_stats() {
  date
  echo
  if [ ! -z $(pidof -x ${progbin}) ]; then
    export pid=$(pidof -x ${progbin})

    export progport=$(lsof -Pp ${pid} | grep '(LISTEN)' | awk '{ print $9}' | cut -d: -f2 | xargs | tr ' ' ',')

    export list=$(ps -eo pid,start_time,cputime,pcpu,pmem,stat,size,nlwp,comm | grep ${pid})

    export start_time=$(echo -e $list | awk '{ print $2 }')
    export cputime=$(echo -e $list | awk '{ print $3 }')
    export pcpu=$(echo -e $list | awk '{ print $4 }')
    export pmem=$(echo -e $list | awk '{ print $5 }')
    export stat=$(echo -e $list | awk '{ print $6 }')
    export size=$(echo -e $list | awk '{ print $7 }')
    export nlwp=$(echo -e $list | awk '{ print $8 }')
    export comm=$(echo -e $list | awk '{ print $9 }')

    export size=$(echo -e "$(bc <<<"scale=2;$size/1024")MB")
  else
    echo -e "Status process: ${red} [ Stopped ] ${reset} "
    echo -e "${red}- Program $prog is not running! ${reset}"
  fi
}

#################################################################
## Status: exibe o estado atual do serviço em formato de tabela.
#################################################################
status() {
  get_stats

  output=$(
    cat <<EOF
ALIAS PROCESS PORT PID CPU_TIME %CPU %MEM MEMORY THREADS STATUS PATH
${alias} ${comm} ${progport} ${pid} ${cputime} ${pcpu} ${pmem} ${size} ${nlwp} ${green}[running]${reset} ${progbin}
EOF
  )

  echo -e "$output" | column -t
}

#################################################################
## get_log: recupera arquivo de ocorrências (log) do serviço.
#################################################################
get_log() {
  consolelog=$(grep -i '^\s*consolefile\s*=' "${pathbin}/${config_filename}" | awk -F= '{print $2}' | tr -d ' ')
  if [ ! -n "$consolelog" ]; then
    if [ -n "${pathbin}/${log_filename}" ]; then
      consolelog="${pathbin}/${log_filename}"
    else
      echo '${red}Logfile not found!${reset} : "${pathbin}/${log_filename}"'
      echo 'Config File: ${pathbin}/${config_filename}'
      echo 'Add parameter: consolefile=${pathbin}/${log_filename}'
    fi
  fi
  echo ${consolelog}
}

#################################################################
## Describe: exibe as configurações do ambiente
#################################################################
describe() {
  get_stats

  ## Exibe o status atual do serviço caso ele esteja em execução.
  if [ ! -z $(pidof -x ${progbin}) ]; then
    output=$(
      cat <<EOF
AlIAS ${alias}
PROCESS ${comm}
PATH ${progbin}
PORT ${progport}
PID ${pid}
STARTED ${start_time}
TIME ${cputime}
%CPU ${pcpu}
%MEM ${pmem}
MEMORY ${size}
STATUS [Running]
THREADS ${nlwp}
EOF
    )
    echo -e "$output" | column -t
    echo
  fi

  ## Exibe as bibliotecas utilizadas pelo serviço.
  echo "### LIBRARY ####"
  ldd ${progbin}
  echo ""

  ## Exibe o appserver.ini completo quando localizado.
  echo "### INI ###"
  if [ -n "${pathbin}/appserver.ini" ]; then
    echo ""
    echo -e "appserver.ini : ${green} ${pathbin}/appserver.ini ${reset}"
    echo ""
    cat ${pathbin}/appserver.ini
  else
    echo "O appserver não foi localizado."
  fi
  echo ""

  ## Exibe as 15 primeiras linhas e as 15 ultimas linhas do logfile.
  echo "### LOGFILE ###"
  consolelog=$(get_log)

  if [ -n "$consolelog" ]; then
    echo ""
    echo -e "console.log : ${green} ${consolelog} ${reset}"
    echo ""
    head -n 15 "$consolelog"
    echo ...
    tail -n 15 "$consolelog"
  else
    echo "Chave 'consolefile' não encontrada no arquivo ${pathbin}/appserver.ini."
  fi

}

#################################################################
## Tail_log: Executa o comando tail -f no arquivo de log do serviço.
#################################################################
tail_log() {
  consolelog=$(get_log)

  if [ -n "$consolelog" ]; then
    echo ""
    echo -e "console.log : ${green}$consolelog${reset}"
    echo ""
    head -n 15 "$consolelog"
    echo ...
    tail -f -n 15 "$consolelog"
  else
    echo "Chave 'consolefile' não encontrada no arquivo ${pathbin}/appserver.ini."
  fi
}

#################################################################
## Export_service: exporta as configurações do ambiente e logfile
#################################################################
export_service() {

  describe >/tmp/${SCRIPT_NAME}_describe.txt

  ldd -v ${progbin} >/tmp/${SCRIPT_NAME}_library.txt

  consolelog=$(get_log)
  if [ -n "$consolelog" ]; then
    cp -p $consolelog /tmp/${SCRIPT_NAME}_console.log
  else
    echo "Chave 'consolefile' não encontrada no arquivo ${pathbin}/appserver.ini."
  fi

  if [ -n "${pathbin}/appserver.ini" ]; then
    cp -p ${pathbin}/appserver.ini /tmp/${SCRIPT_NAME}_appserver.ini
  else
    echo "O appserver não foi localizado."
  fi

  zip_file="/tmp/${SCRIPT_NAME}_export.zip"
  cd /tmp
  zip -r "$zip_file" "${SCRIPT_NAME}_describe.txt" "${SCRIPT_NAME}_console.log" "${SCRIPT_NAME}_appserver.ini" "${SCRIPT_NAME}_library.txt"

  if [ -f "$zip_file" ]; then
    echo -e "Pacote criado com sucesso: ${green} $zip_file ${reset}"
  else
    echo -e "${red}$ Erro ao criar o pacote .zip ${reset}"
  fi
  rm -f /tmp/${SCRIPT_NAME}_describe.txt /tmp/${SCRIPT_NAME}_console.log /tmp/${SCRIPT_NAME}_appserver.ini /tmp/${SCRIPT_NAME}_library.txt

}

SCRIPT_NAME=$(basename "$0")

#################################################################
## Show_help: Mensagem de ajuda
#################################################################
show_help() {
  cat <<EOF
Usage: ${SCRIPT_NAME} {start|stop|kill|restart|status|describe|export|log}

Gerenciamento de serviços permite iniciar, parar, reiniciar, matar, verificar o status, exibir informações.
Use as opções start|stop|kill|restart|status|describe|export|log para realizar operações comuns de serviço com facilidade.

  start     : Inicia o serviço.
  stop      : Encerra o serviço.
  kill      : Encerra o serviço de forma abrupta.
  restart   : Reinicia o serviço.
  status    : Exibe os detalhes do serviço em formato de tabela.
  describe  : Exibe os detalhes do serviço e configurações.
  export    : Exporta as informações do describe junto com o appserver.ini e console.log para
              o arquivo ${SCRIPT_NAME}.zip em /tmp.
  log       : Exibe o log com o comando tail -f.

EOF
}

#################################################################
# MAIN
#################################################################
case "$1" in
start)
  start_service 2>/dev/null
  ;;
stop)
  stop_service
  ;;
kill)
  kill_service
  ;;
restart)
  stop_service
  sleep 1
  start_service 2>/dev/null
  sleep 1
  status
  exit $?
  ;;
status)
  if [ ! -z $(pidof -x $progbin) ]; then
    status
  else
    echo -e "Status process: ${red} [ Stoppe ] ${reset} "
    echo -e "${red}- Program $prog is not running! ${reset}"
  fi
  ;;
describe)
  describe
  ;;
log)
  tail_log
  ;;
export)
  export_service
  ;;
*)
  show_help
  exit 1
  ;;
esac

exit 0
